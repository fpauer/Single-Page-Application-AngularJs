{
  "name": "ember-tooltips",
  "version": "0.5.8",
  "description": "The default blueprint for ember-cli addons.",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "build": "ember build",
    "start": "ember server",
    "test": "ember try:testall"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sir-dunxalot/ember-tooltips"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^2.2.0",
    "ember-cli": "1.13.8",
    "ember-cli-app-version": "^1.0.0",
    "ember-cli-content-security-policy": "0.4.0",
    "ember-cli-dependency-checker": "^1.1.0",
    "ember-cli-github-pages": "0.0.6",
    "ember-cli-htmlbars-inline-precompile": "^0.3.1",
    "ember-cli-inject-live-reload": "^1.3.1",
    "ember-cli-qunit": "^1.0.3",
    "ember-cli-release": "0.2.8",
    "ember-cli-sass": "4.2.1",
    "ember-cli-uglify": "^1.2.0",
    "ember-code-snippet": "1.1.3",
    "ember-disable-prototype-extensions": "^1.0.0",
    "ember-disable-proxy-controllers": "^1.0.1",
    "ember-export-application-global": "^1.0.4",
    "ember-paper": "0.2.8",
    "ember-suave": "1.2.3",
    "ember-resolver": "^2.0.3",
    "ember-try": "~0.0.8",
    "publish": "^0.5.0",
    "rsvp": "^3.1.0"
  },
  "keywords": [
    "ember-addon",
    "tooltips",
    "tooltip",
    "popover",
    "popovers",
    "htmlbars"
  ],
  "dependencies": {
    "ember-cli-babel": "^5.1.5",
    "ember-cli-htmlbars": "^1.0.1"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config",
    "demoURL": "http://sir-dunxalot.github.io/ember-tooltips/"
  },
  "readme": "Ember-tooltips [![Build Status](https://travis-ci.org/sir-dunxalot/ember-tooltips.svg)](https://travis-ci.org/sir-dunxalot/ember-tooltips) [![npm](https://img.shields.io/npm/v/ember-tooltips.svg)](https://www.npmjs.com/package/ember-tooltips)\n======\n\nRender simple tooltips on components, views, HTML elements, and more using simple strings, HTMLBars, bound properties, and more.\n\nPowered by <a href=\"http://darsa.in/tooltip/\" target=\"_blank\">darsain/tooltip</a>. You can see [a demo here](http://sir-dunxalot.github.io/ember-tooltips/).\n\n## Installation\n\n```\nember install ember-tooltips\n```\n\n## Documentation\n\nDocumentation for usage is below:\n\n- [Usage](#usage)\n  - [On helpers](#using-on-helpers)\n  - [As a component](#using-as-a-component)\n  - [On HTML elements](#using-on-html-elements)\n- [Supported properties](#supported-properties)\n- [The Tooltip Object](#the-tooltip-object)\n- [Hiding and Showing Tooltips](#hiding-and-showing-tooltips)\n- [Accessibility](#accessibility)\n- [The Tooltip Mixin (and changing default values)](#the-tooltip-mixin)\n- [The Tooltip Utility](#the-tooltip-utility)\n\n## Usage\n\n### Using on Helpers\n\nThe most common way to use a tooltip is on a helper like `{{#link-to}}` or `{{some-component}}`.\n\nAll [supported properties](#supported-properties) should be camelCased and prefixed by `tooltip`.\n\nTo add a tooltip to any component:\n\n```hbs\n{{#some-component tooltipContent='This is the tooltip'}}\n  Hover over me!\n{{/some-component}}\n```\n\nYou can use multiple options:\n\n```hbs\n{{#some-component\n  tooltipContent='This is the tooltip'\n  tooltipPlace='Right'\n  tooltipSpacing=50\n}}\n  Hover over me!\n{{/some-component}}\n```\n\n### Using as a Component\n\nIf you want to use HTMLBars in your tooltip, then the `{{tooltip-on-parent}}` component is your friend.\n\nThe tooltip is automatically attached to the parent view's element and the template block of the `{{tooltip-on-parent}}` component will be rendered inside the tooltip.\n\n```hbs\n{{#some-component}}\n  {{#tooltip-on-parent}}\n    Stop hovering over me, {{name}}!\n  {{/tooltip-on-parent}}\n\n  Don't hover over me!\n{{/some-component}}\n```\n\ncamelCased Options can still be passed to the component but they are not prefixed:\n\n```hbs\n{{#some-component}}\n  {{#tooltip-on-parent place='right' effectClass='grow'}}\n    <strong>Stop hovering over me, {{name}}!</strong>\n  {{/tooltip-on-parent}}\n\n  Dont' hover over me!\n{{/some-component}}\n```\n\n### Using on HTML elements\n\nIf you want to render a tooltip on an HTML element that isn't rendered by an Ember Component, you can use `data` attributes.\n\n1. Add the `has-tooltip` class\n2. Add `data-<x>` attributes to set tooltip properties\n3. Call `this.renderChildTooltips()` in a parent view that has the tooltips mixin included (usually this mixin is automatically added to all components. See [the tooltips mixin](#the-tooltip-mixin))\n\nFor example, to render two tooltips:\n\n```hbs\n{{#some-component}}\n  <ul class=\"list\">\n    <li class=\"has-tooltip\" data-tooltip-content=\"Dave is great\">Dave</li>\n    <li class=\"has-tooltip\" data-tooltip-content=\"Mike is not great\">Mike</li>\n  </ul>\n{{/some-component}}\n```\n\n```js\n// app/components/some-component.js\n\nimport Ember from 'ember';\nimport TooltipsMixin from 'ember-tooltips/mixins/components/tooltips';\n\nexport default Ember.Component.extend(\n  TooltipsMixin, {\n\n  didInsertElement: function() {\n    this.renderChildTooltips(); // Voila!\n  },\n\n});\n```\n\nOptions can be set on the element(s) as <strong>prefixed and dasherized</strong> attributes. For example:\n\n```hbs\n{{#some-component}}\n  <div class=\"notification\">\n    <span\n      class=\"has-tooltip\"\n      data-tooltip-content=\"This is bad!\"\n      data-tooltip-effect-class=\"grow\"\n      data-tooltip-type-class=\"error\">\n\n      Hover for more info\n\n    </span>\n  </div>\n{{/some-component}}\n```\n\n```js\n// app/components/some-component.js\n\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n\n  didInsertElement: function() {\n    this.renderChildTooltips(); // Voila!\n  },\n\n});\n```\n\n**Warning:** Using HTML `data-x` attributes has limitations. Durations and manual triggers are not supported.\n\n### Supported Properties\n\nThis addon aims to maintain parity with all the [Tooltip library](https://github.com/darsain/tooltip/wiki) features.\n\nCurrent tooltip properties this addon supports are:\n\n- `auto` (`true` or `false`. Defaults to `true`)\n- `duration` (time in milliseconds. No default)\n- `effectClass` (`'none'`, `'fade'`, `'slide'`, or `'grow'`. Defaults to `'slide'`)\n- `event` (see [events](#events))\n- `hideOn` (see [events](#events))\n- `place` (defaults to `'top'`)\n- `showOn` (see [events](#events))\n- `spacing` (defaults to `10`)\n- `typeClass` (can be any string. No default)\n- `visibility` (`true` or `false`, when `event: 'manual'`. No default)\n\n**Please note**, depending on your use case, you may have to prefix or modify the property name. For example, `effectClass`, `tooltipEffectClass` or `data-tooltip-effect-class`.\n\nDefault values can be set [on the `ember-tooltips` mixin](#customizing-the-mixin).\n\n```hbs\n{{input type='text'\n  tooltipEvent='focus'\n  tooltipContent='Helpful form tip'\n  tooltipDuration='1000'\n  tooltipPlace='right'\n}}\n```\n\n### The Tooltip Object\n\nAny time a tooltip is created for a component, the tooltip is set as the `tooltip` property of the component.\n\nThus, you can programatically control the tooltip of any Ember component using `this.get('tooltip')`. This will return the `Tooltip` instance, which is created using [`darsain/tooltip`](https://github.com/darsain/tooltip/wiki/Tooltip).\n\nThe documentation for the tooltip is contained in [the `Tooltip` API wiki](https://github.com/darsain/tooltip/wiki/Tooltip).\n\nFor example:\n\n```js\n/* Change the tooltip content */\nthis.get('tooltip').content('This is the new content');\n\n/* Show the tooltip  */\nthis.get('tooltip').show();\n\n/* Get the tooltip's DOM element  */\nthis.get('tooltip').element;\n\n/* Update the size after the tooltip content changes */\nthis.get('tooltip').updateSize();\n\n/* See if the tooltip is already hidden */\nthis.get('tooltip').hidden; // 1 or 0\n```\n\n### Hiding and Showing Tooltips\n\nThere are three ways to hide and show tooltips:\n\n- [Events](#events)\n- [Methods](#methods)\n- [Timers](#timers)\n\n#### Events\n\nYou can control the hiding and showing of tooltips on set jQuery events using three properties: `event`, `showOn`, and `hideOn`.\n\nVersion `0.5.5` and lower does *not* support `hideOn` and `showOn`.\n\n`event` is the easiest way to set the hide and show event - it sets the `hideOn` and `showOn` properties.\n\n`event` should be a string equal to `'hover'`, `'click'`, `'focus'`, `'ready'` (show on load of DOM), or `'none'`. The default value is `'hover'`.\n\n```hbs\n{{some-component\n  tooltipContent='This will show on hover'\n  tooltipEvent='hover'\n}}\n```\n\nIf you want to set the show or hide events individually, you can overwrite `event` using `showOn` and `hideOn`. Both properties accept any [jQuery event](https://api.jquery.com/category/events/) or `'none'`.\n\nFor example:\n\n```hbs\n{{some-component\n  tooltipHideOn='none'\n  tooltipShowOn='click'\n  tooltipContent='hover'\n}}\n```\n\nDefault values for `event`, `hideOn`, and `showOn` can be set [on the `ember-tooltips` mixin](#customizing-the-mixin).\n\nVersion `0.5.5` and lower of this addon use 'manual' instead of 'none'.\n\n#### Methods\n\nAs described in [The Tooltip Object](#the-tooltip-object) documentation, you can access the `tooltip` property on any component.\n\nThus, you can programatically hide and show the tooltip of any component as follows:\n\n```js\nthis.get('tooltip').hide();\nthis.get('tooltip').show();\n```\n\nIf you want to check whether a tooltip is currently hidden, access the `hidden` property:\n\n```\nthis.get('tooltip').hidden; // 1 or 0\n```\n\n#### Timers\n\nYou can set a timer on a tooltip to close it after an amount of time using the `duration` property. Duration should be any number of milliseconds.\n\n```hbs\n{{input type='text'\n  tooltipEvent='focus'\n  tooltipContent='Helpful form tip'\n  tooltipDuration='1000'\n}}\n```\n\nIn the above example, the tooltip shows on focus and then closes after 1000ms.\n\n### Accessibility\n\nThis addon aims to meet 508 compliance.\n\nComponents with tooltips are given a `tabindex` attribute and when the component receives focus, the tooltip with show.\n\nAdditionally, the `aria-describedby`, `title`, `id`, and `role` attributes are managed by this addon.\n\nThere is always room for improvement and PRs to improve accessibility are welcome.\n\n### The Tooltip Mixin\n\nBy default the `ember-tooltips` mixin is added to all components. This mixin contains the helper methods to render tooltips.\n\nYou can customize where the mixin is automatically added by overriding the `addTo` option in your `config/environment.js` file:\n\n```js\nmodule.exports = function(environment) {\n  var ENV = {\n\n    /* ... */\n\n    tooltips: {\n      addTo: ['Component'], // Ember.Component\n    }\n  }\n};\n```\n\nEach option corresponds to a class on the Ember namespace. For example, `addTo: ['Input']` corresponds to `Ember.Input`.\n\nYou can disable all reopening of classes by seting `addTo` to a falsy value or empty array:\n\n```js\nmodule.exports = function(environment) {\n  var ENV = {\n\n    /* ... */\n\n    tooltips: {\n      addTo: [], // The mixin is not added to anything\n    }\n  }\n};\n```\n\nYou can add the tooltip functionality to individual classes by importing the mixin to your class:\n\n```js\n// app/components/big-button.js\n\nimport Ember from 'ember';\nimport TooltipsComponent from 'ember-tooltips/mixins/components/tooltips';\n\nexport default Ember.Component.extend(\n  TooltipsComponent, {\n\n});\n```\n\nTo set default values for [supported properties](#supported-properties) across your application, set the values in the mixin in your app tree:\n\n```js\n// app/mixins/components/tooltips.js\n\nimport Ember from 'ember';\nimport EmberTooltipsMixin from 'ember-tooltips/mixins/components/tooltips';\n\nexport default Ember.Mixin.create(\n  EmberTooltipsMixin, {\n\n  tooltipPlace: 'right',\n  tooltipSpacing: 20,\n});\n```\n\nYou can see the [tooltips mixin here](https://github.com/sir-dunxalot/ember-tooltips/blob/master/addon/mixins/components/tooltips.js).\n\n### The Tooltip Utility\n\nAll tooltips rendered by this addon use the [`renderTooltip()` utility](https://github.com/sir-dunxalot/ember-tooltips/blob/master/addon/utils/render-tooltip.js).\n\nYou can use this utility in your application if none of the given use cases work:\n\n```js\nimport Ember from 'ember';\nimport renderTooltip from 'ember-tooltips/utils/render-tooltip';\n\nexport default Ember.Component.extend({\n\n  AddTheTooltip() {\n    const element = this.$().find('#some-element')[0];\n\n    renderTooltip(element, {\n      content: 'Some extra info',\n      event: 'click',\n      place: 'right',\n    });\n  },\n\n});\n```\n\n## Development\n\nAll PRs and issues are welcome.\n\n- `git clone https://github.com/sir-dunxalot/ember-tooltips.git`\n- `cd ember-tooltips`\n- `npm install && bower install`\n- `ember s`\n- `ember test`, `ember try:testall`, or the `/tests` route\n\nYou do not need to bump the version when you have a PR.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sir-dunxalot/ember-tooltips/issues"
  },
  "_id": "ember-tooltips@0.5.8",
  "dist": {
    "shasum": "98071511caba8a677e042061bbf881ce9dabffe0"
  },
  "_from": "ember-tooltips@0.5.8",
  "_resolved": "https://registry.npmjs.org/ember-tooltips/-/ember-tooltips-0.5.8.tgz"
}
